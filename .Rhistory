data <- get.PolarCAP(countries, years, type, include.se = TRUE)
#reshape output
test <- reshape(data, varying = c("ideology", "affect"), v.names = "estimate", timevar = "year", idvar = c("country", "country_code"), direction = "long")
#reshape output
test <- reshape(data, varying = c("ideology", "affect"), v.names = "estimate", timevar = "year", idvar = c("country_code"), direction = "long")
#reshape output
test <- reshape(data, varying = c("ideology", "affect"), v.names = "estimate", timevar = "year", direction = "long")
?pivot_longer
library(tidyr)
#reshape output
test <- pivot_longer(data, cols = type, names_to = "type", values_to = "estimate")
#reshape output
test <- pivot_longer(data, cols = all_of(type), names_to = "type", values_to = "estimate")
View(test)
?ifelse
get.PolarCAP <- function(countries = NA, years = NA, type = c("ideology", "affect"),
value.only = FALSE, include.se = FALSE) {
#load data
data <- PolarCAP
#convert countries to ISO3 country codes if necessary
countries <- to.ISO3(countries)
#convert years to numeric if necessary
if (!is.numeric(years)) {
years <- as.numeric(years)
}
#throw warnings if desired countries or years are not in dataset
for (country in countries) {
if (!country %in% unique(data$country_code)) {
warning(paste("No PolarCAP data for country:", country))
}
}
for (year in years) {
if (!year %in% unique(data$year)) {
warning(paste("No PolarCAP data for year:", year))
}
}
#throw error if polarization type is not recognized
for (entry in type) {
if (!entry %in% c("ideology", "affect")) {
stop('type must be either "ideology", "affect", or both')
}
}
#filter for desired countries and years
if (all(is.na(countries))) {
countries <- unique(data$country_code)
}
if (all(is.na(years))) {
years <- unique(data$year)
}
data_cy <- data[data$country_code %in% countries & data$year %in% years,]
#select desired polarization type
if (include.se) {
data_cy <- data_cy[,c("country", "country_code", "year", type, paste(type, "_se", sep = ""),
"notes")]
}
else {
data_cy <- data_cy[,c("country", "country_code", "year", type, "notes")]
}
#throw warning if using value.only = TRUE with both polarization types
if (length(type) == 2 & value.only) {
warning("Using value.only = TRUE with both types of polarization. Output will be vector, not scalar.")
}
#throw warning if using value.only = TRUE with include.se = TRUE
if (value.only & include.se) {
warning("Using value.only = TRUE with include.se = TRUE. Output will not include standard errors. Set value.only = FALSE to obtain a data frame with estimates and standard errors.")
}
#return desired output
if (value.only) {
out <- as.numeric(unlist(data_cy[,c(type)]))
out
}
else {
out <- data_cy
out
}
}
country_grep <- c(FALSE, TRUE, FALSE)
any(country_grep)
#reshape output
test <- pivot_longer(data, cols = all_of(type), names_to = "type", values_to = "estimate",
drop = ifelse(include.se, paste(type, "se", sep = "_"), NULL))
ifelse(include.se, paste(type, "se", sep = "_"), NULL)
type
paste(type, "se")
paste(type, "se", sep = "_")
ifelse(include.se, c(paste(type, "se", sep = "_")), NULL)
c(paste(type, "se", sep = "_"))
#get output from get.PolarCAP
data <- get.PolarCAP(countries, years, type, include.se = FALSE)
#reshape output for estimates
test <- pivot_longer(data, cols = all_of(type), names_to = "type", values_to = "estimate", drop = c("ideology_se", "affect_se"))
View(test)
View(data)
#get output from get.PolarCAP
data <- get.PolarCAP(countries, years, type, include.se = TRUE)
#reshape output for estimates
test <- pivot_longer(data, cols = all_of(type), names_to = "type", values_to = "estimate", drop = c("ideology_se", "affect_se"))
View(data)
#reshape output for estimates
data_est <- data[,c("country", "country_code", "year", "ideology", "affect", "notes")]
test <- pivot_longer(data_est, cols = all_of(type), names_to = "type", values_to = "estimate")
View(test)
data_se <- data[,c("country", "country_code", "year", paste(type, "_se", sep = ""))]
data_se <- pivot_longer(data_se, cols = all_of(paste(type, "_se", sep = "")), names_to = "type",
values = "se")
data_se <- pivot_longer(data_se, cols = all_of(paste(type, "_se", sep = "")), names_to = "type",
values_to = "se")
#get output from get.PolarCAP
data <- get.PolarCAP(countries, years, type, include.se = TRUE)
#reshape output for estimates
data_est <- data[,c("country", "country_code", "year", type, "notes")]
data_est <- pivot_longer(data_est, cols = all_of(type), names_to = "type", values_to = "estimate")
data_se <- data[,c("country", "country_code", "year", paste(type, "_se", sep = ""))]
data_se <- pivot_longer(data_se, cols = all_of(paste(type, "_se", sep = "")), names_to = "type",
values_to = "se")
out <- cbind(data_est, data_se)
#reorder variables
test <- out[,c("country", "country_code", "year", type, if (include.se) {paste(type, "_se", sep = "")},
"notes")]
melt.PolarCAP <- function(countries = NA, years = NA, type = c("ideology", "affect"),
include.se = FALSE) {
#get output from get.PolarCAP
data <- get.PolarCAP(countries, years, type, include.se = TRUE)
#reshape output for estimates
data_est <- data[,c("country", "country_code", "year", type, "notes")]
data_est <- pivot_longer(data_est, cols = all_of(type), names_to = "type", values_to = "estimate")
#reshape output for standard errors if necessary and cbind with estimates
if (include.se) {
data_se <- data[,c("country", "country_code", "year", paste(type, "_se", sep = ""))]
data_se <- pivot_longer(data_se, cols = all_of(paste(type, "_se", sep = "")), names_to = "type",
values_to = "se")
out <- cbind(data_est, data_se)
}
#otherwise, rename estimates
else {
out <- data_est
}
#reorder variables
if (include.se) {
out <- out[,c("country", "country_code", "year", type, paste(type, "_se", sep = ""), "notes")]
}
else {
out <- out[,c("country", "country_code", "year", type, "notes")]
}
out
}
melt.PolarCAP(countries, years, type, include.se = FALSE)
melt.PolarCAP <- function(countries = NA, years = NA, type = c("ideology", "affect"),
include.se = FALSE) {
#get output from get.PolarCAP
data <- get.PolarCAP(countries, years, type, include.se = TRUE)
#reshape output for estimates
data_est <- data[,c("country", "country_code", "year", type, "notes")]
data_est <- pivot_longer(data_est, cols = all_of(type), names_to = "type", values_to = "estimate")
#reshape output for standard errors if necessary and cbind with estimates
if (include.se) {
data_se <- data[,c("country", "country_code", "year", paste(type, "_se", sep = ""))]
data_se <- pivot_longer(data_se, cols = all_of(paste(type, "_se", sep = "")), names_to = "type",
values_to = "se")
out <- cbind(data_est, data_se)
}
#otherwise, rename estimates
else {
out <- data_est
}
#reorder variables
if (include.se) {
out <- out[,c("country", "country_code", "year", "estimate", "se", "notes")]
}
else {
out <- out[,c("country", "country_code", "year", "estimate", "notes")]
}
out
}
melt.PolarCAP(countries, years, type, include.se = FALSE)
melt.PolarCAP(countries, years, type, include.se = TRUE)
#load data
data <- PolarCAP
data[data$country_code == "IRL" & year == 2018, "ideology"]
data[data$country_code == "IRL" & data$year == 2018, "ideology"]
data[data$country_code == "IND" & data$year == 2019, "affect"]
data[data$country_code == "IND" & data$year == 2019, "ideology"]
usethis::use_citation()
?is.na
?grepl
?any
test <- get.PolarCAP()
rm(countries, years)
test <- get.PolarCAP()
get.PolarCAP <- function(countries = NA, years = NA, type = c("ideology", "affect"),
value.only = FALSE, include.se = FALSE) {
#load data
data <- PolarCAP
#filter for desired countries and years
if (all(is.na(countries))) {
warning("No countries provided. Returning results for all available countries.")
countries <- unique(data$country_code)
}
if (all(is.na(years))) {
warning("No years provided. Returning results for all available years.")
years <- unique(data$year)
}
#convert countries to ISO3 country codes if necessary
countries <- to.ISO3(countries)
#convert years to numeric if necessary
if (!is.numeric(years)) {
years <- as.numeric(years)
}
#throw warnings if desired countries or years are not in dataset
for (country in countries) {
if (!country %in% unique(data$country_code)) {
warning(paste("No PolarCAP data for country:", country))
}
}
for (year in years) {
if (!year %in% unique(data$year)) {
warning(paste("No PolarCAP data for year:", year))
}
}
#throw error if polarization type is not recognized
for (entry in type) {
if (!entry %in% c("ideology", "affect")) {
stop('type must be either "ideology", "affect", or both')
}
}
data_cy <- data[data$country_code %in% countries & data$year %in% years,]
#select desired polarization type
if (include.se) {
data_cy <- data_cy[,c("country", "country_code", "year", type, paste(type, "_se", sep = ""),
"notes")]
}
else {
data_cy <- data_cy[,c("country", "country_code", "year", type, "notes")]
}
#throw warning if using value.only = TRUE with both polarization types
if (length(type) == 2 & value.only) {
warning("Using value.only = TRUE with both types of polarization. Output will be vector, not scalar.")
}
#throw warning if using value.only = TRUE with include.se = TRUE
if (value.only & include.se) {
warning("Using value.only = TRUE with include.se = TRUE. Output will not include standard errors. Set value.only = FALSE to obtain a data frame with estimates and standard errors.")
}
#return desired output
if (value.only) {
out <- as.numeric(unlist(data_cy[,c(type)]))
out
}
else {
out <- data_cy
out
}
}
test <- get.PolarCAP()
View(data)
countries <- rep(c("MEX", "USA"), each = 2)
years <- rep(c(2018, 2019), 2)
data <- cbind(countries, years)
View(data)
data$ideology1 <- apply(data, 1, function(x) get.PolarCAP(x[1], x[2], type = "ideology", value.only = TRUE))
data <- as.data.frame(cbind(countries, years))
data <- as.data.frame(countries, years)
data <- as.data.frame(cbind(countries, years))
View(data)
data$ideology1 <- apply(data, 1, function(x) get.PolarCAP(x[1], x[2], type = "ideology", value.only = TRUE))
data <- rowwise(data) %>% mutate(ideology2 = get.PolarCAP(countries, years, type = "ideology", value.only = TRUE))
View(data)
ideology_polar <- get.PolarCAP("USA", c(2018, 2019), "ideology", include.se = TRUE)
View(ideology_polar)
both_polar <- get.PolarCAP("USA", c(2018, 2019), c("ideology", "affect"), include.se = TRUE)
View(both_polar)
get.PolarCAP("USA", c(2018, 2019), "ideology", include.se = TRUE)
get.PolarCAP("USA", c(2018, 2019), c("ideology", "affect"), include.se = TRUE)
apply(data, 1, function(x) get.PolarCAP(x[1], x[2], type = "ideology", value.only = TRUE))
data <- rowwise(data) %>% mutate(ideology2 = get.PolarCAP(countries, years, type = "ideology", value.only = TRUE))
data
melt.PolarCAP <- function(countries = NA, years = NA, type = c("ideology", "affect"),
include.se = FALSE) {
#get output from get.PolarCAP
data <- get.PolarCAP(countries, years, type, include.se = TRUE)
#reshape output for estimates
data_est <- data[,c("country", "country_code", "year", type, "notes")]
data_est <- pivot_longer(data_est, cols = all_of(type), names_to = "type", values_to = "estimate")
#reshape output for standard errors if necessary and cbind with estimates
if (include.se) {
data_se <- data[,c("country", "country_code", "year", paste(type, "_se", sep = ""))]
data_se <- pivot_longer(data_se, cols = all_of(paste(type, "_se", sep = "")), names_to = "type",
values_to = "se")
out <- cbind(data_est, data_se)
}
#otherwise, rename estimates
else {
out <- data_est
}
#reorder variables
if (include.se) {
out <- out[,c("country", "country_code", "year", "estimate", "se", "notes")]
}
else {
out <- out[,c("country", "country_code", "year", "estimate", "notes")]
}
out
}
melt.PolarCAP("USA", c(2018, 2019), "ideology", include.se = TRUE)
melt.PolarCAP("USA", c(2018, 2019), c("ideology", "affect"), include.se = TRUE)
melt.PolarCAP <- function(countries = NA, years = NA, type = c("ideology", "affect"),
include.se = FALSE) {
#get output from get.PolarCAP
data <- get.PolarCAP(countries, years, type, include.se = TRUE)
#reshape output for estimates
data_est <- data[,c("country", "country_code", "year", type, "notes")]
data_est <- pivot_longer(data_est, cols = all_of(type), names_to = "type", values_to = "estimate")
#reshape output for standard errors if necessary and cbind with estimates
if (include.se) {
data_se <- data[,c("country", "country_code", "year", paste(type, "_se", sep = ""))]
data_se <- pivot_longer(data_se, cols = all_of(paste(type, "_se", sep = "")), names_to = "type",
values_to = "se")
out <- cbind(data_est, data_se)
}
#otherwise, rename estimates
else {
out <- data_est
}
#reorder variables
if (include.se) {
out <- out[,c("country", "country_code", "year", "type", "estimate", "se", "notes")]
}
else {
out <- out[,c("country", "country_code", "year", "type", "estimate", "notes")]
}
out
}
melt.PolarCAP("USA", c(2018, 2019), c("ideology", "affect"), include.se = TRUE)
to.ISO3(c("ALB", "aus", "united states"))
?toupper
toupper("aus")
toupper("AUS")
to.ISO3 <- function(countries) {
#load data
data <- PolarCAP
#create vector to save final country codes
out <- c()
#assign entry to final country codes if ISO3 country in PolarCAP, otherwise search for it and replace it with result
for (country in countries) {
#if entry is NA, assign NA to final vector
if (is.na(country)) {
out <- c(out, country)
}
#otherwise, attempt to convert to ISO3
else {
#check if entry is ISO3 country code in PolarCAP
country_grep <- grepl(country, unique(data$country_code), ignore.case = TRUE)
#capitalize and assign to final vector if is ISO3 country code in PolarCAP
if (any(country_grep)) {
country_up <- toupper(country)
out <- c(out, country)
}
#otherwise, search for country code and assign to final vector
else {
#attempt to convert to standard country name
country_iso3 <- countryname(country, destination = "iso3c", warn = FALSE)
#if successful, assign to final vector
if (!is.na(country_iso3)) {
out <- c(out, country_iso3)
}
#otherwise, assign original entry to final vector
else {
out <- c(out, country)
}
}
}
}
out
}
to.ISO3(c("ALB", "aus", "united states"))
to.ISO3 <- function(countries) {
#load data
data <- PolarCAP
#create vector to save final country codes
out <- c()
#assign entry to final country codes if ISO3 country in PolarCAP, otherwise search for it and replace it with result
for (country in countries) {
#if entry is NA, assign NA to final vector
if (is.na(country)) {
out <- c(out, country)
}
#otherwise, attempt to convert to ISO3
else {
#check if entry is ISO3 country code in PolarCAP
country_grep <- grepl(country, unique(data$country_code), ignore.case = TRUE)
#capitalize and assign to final vector if is ISO3 country code in PolarCAP
if (any(country_grep)) {
country_up <- toupper(country)
out <- c(out, country_up)
}
#otherwise, search for country code and assign to final vector
else {
#attempt to convert to standard country name
country_iso3 <- countryname(country, destination = "iso3c", warn = FALSE)
#if successful, assign to final vector
if (!is.na(country_iso3)) {
out <- c(out, country_iso3)
}
#otherwise, assign original entry to final vector
else {
out <- c(out, country)
}
}
}
}
out
}
to.ISO3(c("ALB", "aus", "united states"))
devtools::document()
devtools::document()
rm(list = c("get.PolarCAP", "melt.PolarCAP", "to.ISO3"))
devtools::document()
usethis::use_ccby_license()
usethis::use_cc0_license()
usethis::use_readme_md()
get.PolarCAP(countries = countries, years = years, type = c("ideology", "affect"), include.se = TRUE)
countries <- rep(c("AUS", "MEX", "USA"), each = 2)
years <- rep(c(2018, 2019), 3)
data <- as.data.frame(cbind(countries, years))
get.PolarCAP(countries = countries, years = years, type = c("ideology", "affect"), include.se = TRUE)
melt.PolarCAP(countries = countries, years = years, type = c("ideology", "affect"))
get.PolarCAP(countries = countries, years = years, type = c("ideology", "affect"), include.se = TRUE)
melt.PolarCAP(countries = countries, years = years, type = c("ideology", "affect"), include.se = TRUE)
data$ideology1 <- apply(data, 1, function(x) get.PolarCAP(countries = x[1], years = x[2], type = "ideology", value.only = TRUE))
data <- rowwise(data) %>% mutate(ideology2 = get.PolarCAP(countries = countries, years = years, type = "ideology", value.only = TRUE))
data
get.PolarCAP(countries = c("AUS", "MEX", "USA"), years = 2019, type = "ideology")
get.PolarCAP(countries = c("aus", "MEX", "united states"), years = 2019, type = "ideology")
get.PolarCAP(countries = c("aus", "MEX", "stati uniti"), years = 2019, type = "ideology")
get.PolarCAP(countries = c("aus", "MEX", "Stati Uniti"), years = 2019, type = "ideology")
View(data)
usethis::use_github_action("check-standard")
usethis::use_news_md()
usethis::use_cran_comments()
urlchecker::url_check()
devtools::check()
countries <- rep(c("MEX", "USA"), each = 2)
years <- rep(c(2018, 2019), 2)
data <- as.data.frame(cbind(countries, years))
data <- rowwise(data)
library(tidyr)
data <- rowwise(data)
devtools::check()
devtools::check()
?install.packages
library(devtools)
install_version("roxygen2", version = "7.2.0")
devtools::check()
devtools::check_win_devel()
devtools::check()
devtools::check()
devtools::check()
devtools::check_win_devel()
rhub::check_for_cran()
library(rhub)
install.packages("rhub")
library(rhub)
rhub::check_for_cran()
devtools::check()
devtools::submit_cran()
devtools::submit_cran()
devtools::check_win_oldrelease()
devtools::check_win_release()
devtools::check()
devtools::release()
spell_check()
spell_check()
devtools::release()
?release_checks
devtools::release()
check_rhub()
install.packages("tidy")
PolarCAP
test <- PolarCAP
class(test)
isS4(test)
devtools::release()
devtools::release()
devtools::release()
library(devtools)
urlchecker::url_check()
devtools::check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_oldrelease()
devtools::release()
spell_check()
devtools::release()
check_rhub()
devtools::release()
devtools::release()
devtools::release()
devtools::release()
devtools::release()
devtools::release()
library(usethis)
library(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
pkgdown::build_favicons()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
